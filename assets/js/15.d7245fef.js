(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{598:function(e,t,r){"use strict";r.r(t);var a=r(3),i=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"java23种设计模式全解析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java23种设计模式全解析"}},[e._v("#")]),e._v(" Java23种设计模式全解析")]),e._v(" "),r("h2",{attrs:{id:"一、设计模式简介"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一、设计模式简介"}},[e._v("#")]),e._v(" 一、设计模式简介")]),e._v(" "),r("p",[e._v("设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。\n设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。")]),e._v(" "),r("h2",{attrs:{id:"二、设计模式的六大原则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二、设计模式的六大原则"}},[e._v("#")]),e._v(" 二、设计模式的六大原则")]),e._v(" "),r("p",[e._v("总原则：开闭原则（Open Close Principle）")]),e._v(" "),r("p",[e._v("开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，而是要扩展原有代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类等，后面的具体设计中我们会提到这点。")]),e._v(" "),r("h3",{attrs:{id:"_1、单一职责原则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、单一职责原则"}},[e._v("#")]),e._v(" 1、单一职责原则")]),e._v(" "),r("p",[e._v("不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就应该把类拆分。")]),e._v(" "),r("h3",{attrs:{id:"_2、里氏替换原则（liskov-substitution-principle）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、里氏替换原则（liskov-substitution-principle）"}},[e._v("#")]),e._v(" 2、里氏替换原则（Liskov Substitution Principle）")]),e._v(" "),r("p",[e._v("里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。—— From Baidu 百科\n历史替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。")]),e._v(" "),r("h3",{attrs:{id:"_3、依赖倒转原则（dependence-inversion-principle）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、依赖倒转原则（dependence-inversion-principle）"}},[e._v("#")]),e._v(" 3、依赖倒转原则（Dependence Inversion Principle）")]),e._v(" "),r("p",[e._v("这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。")]),e._v(" "),r("h3",{attrs:{id:"_4、接口隔离原则（interface-segregation-principle）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4、接口隔离原则（interface-segregation-principle）"}},[e._v("#")]),e._v(" 4、接口隔离原则（Interface Segregation Principle）")]),e._v(" "),r("p",[e._v("这个原则的意思是：每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分。使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好。")]),e._v(" "),r("h3",{attrs:{id:"_5、迪米特法则（最少知道原则）（demeter-principle）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5、迪米特法则（最少知道原则）（demeter-principle）"}},[e._v("#")]),e._v(" 5、迪米特法则（最少知道原则）（Demeter Principle）")]),e._v(" "),r("p",[e._v("就是说：一个类对自己依赖的类知道的越少越好。也就是说无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过public方法提供给外部。这样当被依赖的类变化时，才能最小的影响该类。\n最少知道原则的另一个表达方式是：只与直接的朋友通信。类之间只要有耦合关系，就叫朋友关系。耦合分为依赖、关联、聚合、组合等。我们称出现为成员变量、方法参数、方法返回值中的类为直接朋友。局部变量、临时变量则不是直接的朋友。我们要求陌生的类不要作为局部变量出现在类中。")]),e._v(" "),r("h3",{attrs:{id:"_6、合成复用原则（composite-reuse-principle）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6、合成复用原则（composite-reuse-principle）"}},[e._v("#")]),e._v(" 6、合成复用原则（Composite Reuse Principle）")]),e._v(" "),r("p",[e._v("原则是尽量首先使用合成/聚合的方式，而不是使用继承。")]),e._v(" "),r("h2",{attrs:{id:"三、分类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三、分类"}},[e._v("#")]),e._v(" 三、分类")]),e._v(" "),r("p",[e._v("总体来说设计模式分为三大类：\n创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。\n结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。\n行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://www.runoob.com/design-pattern/design-pattern-intro.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("更详细见菜鸟教程"),r("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=i.exports}}]);